// Global variable for Choco samples
var samples;

<<<<<<< HEAD
window.onload = function() {
=======
window.onload = function () {
>>>>>>> release/half-sprint-2
    // Fullfill drilldown list with Choco samples
    updateSamples();

    // Initializing Ace editor
    var editor = ace.edit("editor");
    editor.setTheme("ace/theme/monokai");
<<<<<<< HEAD
    editor.getSession().setMode("ace/mode/java");
    editor.$blockScrolling = Infinity;

    // Event handler when selected value has changed
    $('#samples').change(function() {
        var filenameSelectedSample = $('#samples option:selected').val();

        var jsonSamples = jQuery.parseJSON(samples);
        jsonSamples.forEach(function(jsonSample) {
=======
    editor.getSession().setMode("ace/mode/choco");
    editor.$blockScrolling = Infinity;

    // Event handler when selected value has changed
<<<<<<< HEAD

    $('#samples').change(function () {
=======
    $('#samples').change(function() {
>>>>>>> 78c49ec70eb807de904622511a5fda4dd867bb7d
        var filenameSelectedSample = $('#samples option:selected').val();

        var jsonSamples = jQuery.parseJSON(samples);
        jsonSamples.forEach(function (jsonSample) {
>>>>>>> release/half-sprint-2
            if (filenameSelectedSample == jsonSample.filename) {
                editor.getSession().setValue(jsonSample.content);
            }
        });
    });

    // Event handler when submitting a report
    $("#reportForm").submit(function(event) {
        event.preventDefault();
        var email = $('#emailReport').val();
        var comment = $('#commentReport').val();
        sendReport(email, comment); // call the report service
        $('#reportModal').modal('hide'); // hide the report form
        $('#reportForm')[0].reset(); // clear the report form
        return false; // avoiding event to be processed
    });
}

function updateSamples() {
    var select = $('#samples');

    // Fire the HTTP GET request
    var request = $.ajax({
        url: "/getCodeSampleList",
        type: "get"
    });

<<<<<<< HEAD
    request.done(function (response, textStatus, jqXHR){
=======
    request.done(function (response, textStatus, jqXHR) {
>>>>>>> release/half-sprint-2
        // Updating the model
        samples = response;

        // Updating the initial code in Ace editor
        ace.edit("editor").getSession().setValue(jQuery.parseJSON(samples)[0].content);
        var jsonSamples = jQuery.parseJSON(response);

        // Updating the drilldown
<<<<<<< HEAD
        jsonSamples.forEach(function(jsonSample) {
=======
        jsonSamples.forEach(function (jsonSample) {
>>>>>>> release/half-sprint-2
            var option = document.createElement("option");
            option.text = jsonSample.name;
            option.value = jsonSample.filename;
            select.append(option);
        });
    });

<<<<<<< HEAD
    request.fail(function (jqXHR, textStatus, errorThrown){
        // Log the error to the console
        console.log(
=======
    request.fail(function (jqXHR, textStatus, errorThrown) {
        // Log the error to the console
        console.error(
>>>>>>> release/half-sprint-2
            "The following error occurred: "+
            textStatus, errorThrown
        );
    });
}

<<<<<<< HEAD
=======
function defineAceKeywords(){

}

>>>>>>> release/half-sprint-2

function compile() {
    var editor = ace.edit("editor");
    var code = editor.getSession().getValue();
<<<<<<< HEAD
    var outputConsole = document.getElementById('console');
=======
    var console = document.getElementById('console');
>>>>>>> release/half-sprint-2

    // Fire the HTTP POST request
    var request = $.ajax({
        url: "/compile",
        type: "post",
<<<<<<< HEAD
        data: { body: code }
=======
        data: {body: code}
>>>>>>> release/half-sprint-2
    });

    // Callback handler that will be called on success - HTTP 200 OK
    request.done(function (response, textStatus, jqXHR){
<<<<<<< HEAD
        console.log("Request done !");

        var compilationEvents = response.errors;
        var runtimeEvents = response.events;

        outputConsole.innerHTML = "";

        compilationEvents.forEach(function(compilationEvent) {
<<<<<<< HEAD
            outputConsole.innerHTML += "<p style=\" color:red; background-color: black\">" + "Error during compilation : " + compilationEvent + "</p>";
=======
            console.innerHTML += "<p class=\"compilationErr\">" + "Error during compilation : " + compilationEvent + "</p>";
>>>>>>> 5723e39886683fe07d4dba5c5d22beaf13d05bfc
=======
        var compilationEvents = response.errors;
        var runtimeEvents = response.events;

        compilationEvents.forEach(function(compilationEvent) {
            console.innerHTML += "<p class=\"compilationErr\">" + "Error during compilation : " + compilationEvent + "</p>";
>>>>>>> release/half-sprint-2
        });

        runtimeEvents.forEach(function(runtimeEvent) {
            var className = "stdOut";
            if(runtimeEvent.kind == "stderr") {
                className = "stdErr"
            }
<<<<<<< HEAD
<<<<<<< HEAD
            else {
                // ????
            }
            outputConsole.innerHTML += "<p style=\"color:"+textColor+";\">" + runtimeEvent.message + "</p>";
=======
            console.innerHTML += "<p class="+className+">" + runtimeEvent.message + "</p>";
>>>>>>> 5723e39886683fe07d4dba5c5d22beaf13d05bfc
        });
    });

    // Callback handler that will be called on failure
    request.fail(function (jqXHR, textStatus, errorThrown){
        // Log the error to the console
        console.log(
=======
            console.innerHTML += "<p class="+className+">" + runtimeEvent.message + "</p>";
        });
    });


    // Callback handler that will be called on failure
    request.fail(function (jqXHR, textStatus, errorThrown) {
        // Log the error to the console
        console.error(
>>>>>>> release/half-sprint-2
            "The following error occurred: "+
            textStatus, errorThrown
        );
    });
}


function sendReport(userEmail, comment) {
    var editor = ace.edit("editor");
    var sourceCode = editor.getSession().getValue();

    var compilationErrs ="", stdOuts="", stdErrs="";
    $('.compilationErr').each(function() {
        compilationErrs += $(this).text() + "\n"
    });

    $('.stdOut').each(function() {
        stdOuts += $(this).text() + "\n"
    });

    $('.stdErr').each(function() {
        stdErrs += $(this).text() + "\n"
    });

    // Fire the HTTP POST request
    var request = $.ajax({
        url: "/reportError",
        type: "post",
        data: {
            sourceCode: sourceCode,
            userEmail: userEmail,
            stdOut: stdOuts,
            stdErr: stdErrs,
            compilationErr: compilationErrs,
            comment: comment
        }
    });

    // Callback handler that will be called on success - HTTP 200 OK
    request.done(function (response, textStatus, jqXHR){
        $('#alertReportSuccess').modal('show');
    });

    // Callback handler that will be called on failure
    request.fail(function (jqXHR, textStatus, errorThrown){
        $('#alertReportFailure').modal('show');

        // Log the error to the console
        console.error(
            "The following error occurred: "+
            textStatus, errorThrown
        );
<<<<<<< HEAD
    });
}
=======
        console.innerHTML="<p class='error'>Server Error, please try again</p>";

    });
}
>>>>>>> release/half-sprint-2
